name: prod_onprcurd_planapply

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - prod
    paths:
      - ".github/workflows/prod_onprcurd_planapply.yml"

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

env:
  WORKING_DIR: .
  CONFIG_DIR: ./configs
  CONFIG_FILE: prod.tfvars
  BACKEND_DIR: ./backends
  BACKEND_FILE: prod.tf
  TF_VER: 1.1.0
  JOB_TIMEOUT_MINUTES_LONG: 5

jobs:
  tf-plan-prod:
    name: "tf-plan-prod: init,validate,plan"

    timeout-minutes: 5

    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/prod'

    defaults:
      run:
        shell: bash
        working-directory: .

    environment: prod_planapply

    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_PROD_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_PROD_TENANT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_PROD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_PROD_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_PROD_TENANT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_PROD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      STATE_RESOURCE_GROUP_NAME: ${{ secrets.STATE_PROD_RESOURCE_GROUP_NAME }}
      STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_PROD_STORAGE_ACCOUNT_NAME }}
      STATE_CONTAINER_NAME: ${{ secrets.STATE_PROD_CONTAINER_NAME }}
      STATE_KEY: ${{ secrets.STATE_PROD_KEY }}

    steps:
      - run: echo onprcurd_planapply

      - uses: actions/checkout@v3

      - name: Install Azure cli
        run: |
          sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install azure-cli

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ env.TF_VER }}"

      - name: Azure Login
        run: az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

      - name: Azure CLI Command
        run: az account show

      - name: Azure Account Set
        run: az account set --subscription ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}

      - name: Run> terraform init
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform init -upgrade -input=false -reconfigure -backend-config="${{ env.BACKEND_DIR }}/${{ env.BACKEND_FILE }}"

      - name: Run> terraform validate
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform validate

      - name: Run> terraform plan
        id: tf-plan
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform plan -detailed-exitcode -input=false -var-file="${{ env.CONFIG_DIR }}/${{ env.CONFIG_FILE }}"
        continue-on-error: true

      - name: Check for "terraform plan" failure
        if: steps.tf-plan-prod.outputs.exitcode == 1
        run: exit 1

    outputs:
      tf-plan-exit-code: ${{ steps.tf-plan-prod.outputs.exitcode }}

  tf-apply-prod:
    name: "tf-apply-prod: apply"

    timeout-minutes: 5

    runs-on: ubuntu-latest
    needs: tf-plan-prod
    if: |
      needs.tf-plan-prod.outputs.tf-plan-exit-code == 2 && github.ref == 'refs/heads/prod'

    defaults:
      run:
        shell: bash
        working-directory: .

    environment: prod_planapply

    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_PROD_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_PROD_TENANT_ID }}
      AZURE_CLIENT_SECRET: ${{ secrets.AZURE_PROD_CLIENT_SECRET }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      ARM_CLIENT_ID: ${{ secrets.AZURE_PROD_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_PROD_TENANT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_PROD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}
      STATE_RESOURCE_GROUP_NAME: ${{ secrets.STATE_PROD_RESOURCE_GROUP_NAME }}
      STATE_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_PROD_STORAGE_ACCOUNT_NAME }}
      STATE_CONTAINER_NAME: ${{ secrets.STATE_PROD_CONTAINER_NAME }}
      STATE_KEY: ${{ secrets.STATE_PROD_KEY }}

    steps:
      - run: echo onprcurd_planapply

      - uses: actions/checkout@v3

      - name: Install Azure cli
        run: |
          sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg
          curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
          AZ_REPO=$(lsb_release -cs)
          echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list
          sudo apt-get update
          sudo apt-get install azure-cli

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "${{ env.TF_VER }}"

      - name: Azure Login
        run: az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

      - name: Azure CLI Command
        run: az account show

      - name: Azure Account Set
        run: az account set --subscription ${{ secrets.AZURE_PROD_SUBSCRIPTION_ID }}

      - name: Run> terraform init
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform init -upgrade -input=false -reconfigure -backend-config="${{ env.BACKEND_DIR }}/${{ env.BACKEND_FILE }}"

      - name: Run> terraform validate
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform validate

      - name: Run> terraform fmt
        run: |
          cd "${{ env.WORKING_DIR }}"
          terraform fmt -check -recursive
        continue-on-error: true

      - name: Run> terraform apply
        run: |
          cd "${{ env.WORKING_DIR}}"
          terraform apply -auto-approve